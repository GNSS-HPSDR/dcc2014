\section{Mixed Signals}

\subsection{The System Tree}

\begin{frame}[shrink=20,fragile]
    \frametitle{Resource Tree}
    Goal of project 2 is to see a sine wave come out of the DSP scope.
    \input{img/project2-resource-tree.latex}
    \begin{block}{Paths}
        /soc/pbus/project2/dsp/scope
    \end{block}
\end{frame}

\begin{frame}{Connections}
    \begin{block}{Edges}
        A graph contains edges.
    \end{block}
\end{frame}

\begin{frame}{Digital Signals}
    Both Time and Signal Amplitudes are Discrete - as in a finite number of bits.
    \begin{block}{Characteristics}
        \begin{itemize}
            \item Bitwidth
            \item Data Format
            \item Sample Rate
        \end{itemize}
    \end{block}
\end{frame}

\begin{frame}{Analog Signals}
    Both Time and Signal Amplitude are Continuous - as in the real world and divisible ad infinitum.
    \begin{block}{Characteristics}
        \begin{itemize}
            \item Common Mode
            \item V-p-p, Vrms, P
            \item Impdedance (at frequencies of interest)
        \end{itemize}
    \end{block}

    \begin{block}{Note on Digital Signals}
        Digital Signals end up actually being represented as Analog Signals.  When you interface digital circuits you must concern yourself with the interface between subsystems.
    \end{block}
\end{frame}

\begin{frame}[fragile]
    \frametitle{The Mixed Signal System}
    \begin{center}
        \begin{tikzpicture}[start chain, align=center]
            \tikzstyle{every on chain} = [join];
            \tikzstyle{every join} = [->];
            \node [on chain] {analog\\input};
            \node [on chain, draw, shape=signal, signal to=west] (adc) {ADC};
            \node [on chain, draw] (sys) {System};
            \node [on chain, draw, shape=signal, signal to=east] (dac) {DAC};
            \node [on chain] {analog\\output};

            \node [below of=adc] (adcclk) {conv\\clk};
            \draw [->] (adcclk.north) -- (adc.south);

            \node [below of=sys] (sysclk) {system\\clk};
            \draw [->] (sysclk.north) -- (sys.south);

            \node [below of=dac] (dacclk) {conv\\clk};
            \draw [->] (dacclk.north) -- (dac.south);
        \end{tikzpicture}
    \end{center}
\end{frame}

\subsection{Interfacing Domains}

\begin{frame}[fragile]
    \frametitle{Analog to Digital Converter}
    Takes analog signals as input, and converts them to digital signals.
    \begin{block}{Important Characterisitics}
        \begin{itemize}
            \item Sampling Rate
            \item Resolution
            \item Input Common Mode Voltage
            \item Input Voltage Range
            \item Noise and Distortion
        \end{itemize}
        Be very careful you choose the right ADC; and that depends on what you are hooking the ADC up to.
    \end{block}
    \begin{tikzpicture}[align=center, start chain]
        \tikzstyle{every node} = [on chain, join];
        \tikzstyle{every join} = [->];

        \node {input};
        \node [draw] (aaf) {Anti-\\aliasing\\filter};
        \node [draw] {Level\\set};
        \node [shape=signal, signal to=west, draw] {ADC};
        \node {output};
    \end{tikzpicture}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Ditigal to Analog Converter}
    Takes digital signals as input, and converts them to analog signals.
    \begin{block}{Important Characterisitics}
        \begin{itemize}
            \item Sampling Rate
            \item Resolution
            \item Output Common Mode Voltage
            \item Output Voltage Range
            \item Noise and Distortion
        \end{itemize}
        Be very careful that you choose the right DAC; and that depends on what you're hooking the DAC up to.
    \end{block}
    \begin{tikzpicture}[align=center, start chain]
        \tikzstyle{every node} = [on chain, join];
        \tikzstyle{every join} = [->];

        \node {input};
        \node [shape=signal, signal to=east, draw] {DAC};
        \node [draw] {Reconstruction\\filter};
        \node [draw] {Level\\set};
        \node {output};
    \end{tikzpicture}
\end{frame}

\begin{frame}{Coupling Converters}
    The mixer outputs an un-balanced 0.1 Vp-p signal centered around 0 V.
    The mixer has frequency products well above the desired frequency range.
    The ADC expects a balanced 1.024 Vp-p signal centered around 1.6 V,
    and a maximum sampling rate much below the mixer's highest frequency
    component.
    \begin{center}
        \begin{tikzpicture}[circuit ee IEC, align=center]
            { [start chain]
                \node [on chain, join] {input};
                \node [contact, on chain, join] {};
                \node [cloud, draw, on chain, join] (cond) {Signal\\Conditioning};
            }
            \node [above right of=cond] (output) {output};
            \draw [->] (cond.30) -- (output);
        \end{tikzpicture}
    \end{center}
\end{frame}

\begin{frame}{Getting the Most out of your Converter}
    The solution?  An Op Amp with a low pass filter built in.
\end{frame}

\begin{frame}[fragile]
    \frametitle{The Sampling Clock}
    Espectially important for DACs.
    \begin{example}
        \begin{python}
conv_clk = conv_clk = Clock.create_and_connect(self.path,
        'conv_clk', 1e6, jitter=5)
        \end{python}
    \end{example}
\end{frame}

\subsection{FIFO}

\begin{frame}[fragile]
    \frametitle{Clock Domains}
    \begin{block}{Problem}
        Interfacing signals that run with different clocks can be problematic.
        \begin{wave}{2}{5}
            \nextwave{req\_addr} \bit{0}{.2} \bit{1}{1} \bit{0}{3} \bit{1}{1} \bit{0}{.8}
            \nextwave{inst\_addr} \unknown[X]{.5} \known{addr}{1} \unknown{4.5}
        \end{wave}
    \end{block}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Synchronizing Registers between Clock Domains}
    \begin{block}{Metastability}
        Clocks in the real world don't just go from 0 to 1 and back;
    \end{block}

    \begin{block}{Two Flip Flop Synchronizer}
        Make a flip flop example that shows the two port synchronizer.
    \end{block}

    \begin{example}
        \begin{python}
clearn = Synchronize.create_and_connect(self_path, 'clearn',           
        conv_clk, resetn, bool(True))
dspen = Synchronize.create_and_connect(self_path, 'dspen',             
        conv_clk, status_led, bool(False))
        \end{python}
    \end{example}
\end{frame}

\begin{frame}{Random Access Memory}
    \includegraphics[width=.9\textwidth]{img/dram.jpg}
    \cite{ZeptoBars}
    This stuff is \em{volatile}, folks!
\end{frame}

\begin{frame}[fragile]
    \frametitle{The Two Port RAM}
    \begin{example}
        \begin{python}
ram = Ram.create_and_connect(self.path, 'ram', resetn,
        wclk, rclk, width, depth, pipe=False)
ram.port_a()
ram.port_b()
        \end{python}
    \end{example}
\end{frame}

\begin{frame}[fragile]
    \frametitle{Streaming with the FIFO}
    \begin{example}
        \begin{python}
fifo = Fifo.create_and_connect(self_path, 'fifo',
        resetn, clk, conv_clk, width=32, depth=128)
fifo.write_port()
fifo.read_port()
        \end{python}
    \end{example}
\end{frame}

\section{dsp}

\subsection{numpy}

\begin{frame}{Digital Signal Processing}
    \begin{definition}
        {\em Digital Signal Processing} is the mathematical manipulation of a digital signal.  It can be done on a processor, or in custom logic.
    \end{definition}
\end{frame}

\begin{frame}[fragile]
    \frametitle{NumPy is Fast}
    \begin{block}{Why?}
        {\em NumPy} stores data in byte-packed memory, and uses C co-processing routines to do math quickly over many samples.
    \end{block}
    \begin{example}
        \begin{python}
>>> import numpy as np
>>> a = numpy.arange(0, np.pi)
array([0, 1, 2])
>>> a * a
array([0, 1, 4])
        \end{python}
    \end{example}
\end{frame}

\begin{frame}{Creating Series}
    \begin{block}{Tools}
        \begin{itemize}
            \item {\em zeroes} - an array of all zeroes
            \item {\em array} - an array from an iterator
            \item {\em arange} - an array from start to end spaced by step
            \item {\em linspace} - an array of N numbers equally spaced from start to end
        \end{itemize}
    \end{block}
\end{frame}

\begin{frame}[shrink=20,fragile]
    \frametitle{Plotting with matplotlib}
    \begin{columns}
        \begin{column}{.5\textwidth}
            \begin{example}
                \pythonexternal{img/exampleplt.py}
            \end{example}
        \end{column}
        \begin{column}{.5\textwidth}
            \includegraphics[width=.9\textwidth]{img/exampleplt.png}
        \end{column}
    \end{columns}
\end{frame}

\begin{frame}[shrink=40,fragile]
    \frametitle{Fourier Transform}
    \begin{columns}
        \begin{column}{.5\textwidth}
            \begin{example}
                \pythonexternal{img/fourierplt.py}
            \end{example}
        \end{column}
        \begin{column}{.5\textwidth}
            \includegraphics[width=.9\textwidth]{img/fourierplt.png}
        \end{column}
    \end{columns}
\end{frame}

\subsection{fpga flowgraph}

\begin{frame}[fragile]
    \frametitle{The Signal Processing Flowgraph}
    \begin{example}
        \begin{python}
dsp = DspFlow.create(self_path, 'dsp', clearn, conv_clk)
signal_net = DspFlow.create_net(dsp, 'signal', width=32)
        \end{python}
    \end{example}
\end{frame}

\begin{frame}[fragile]
    \frametitle{The Streaming Bus}
    \begin{example}
        \begin{python}
fifo_source = FifoSource.create_and_connect(dsp.path, 'fifo_source',
        dspen, fifo, dsp, 'signal')
scope_sink = ScopeSink.create_and_connect(dsp.path, 'scope',
        clearn, conv_clk, dsp, 'signal')
        \end{python}
    \end{example}
    \begin{tikzpicture}[start chain, align=center]
        \tikzstyle{block} = [on chain, join, draw];
        \tikzstyle{net} = [on chain, join, circle, fill, inner sep=0pt, outer sep=0pt];
        \node [block] {Fifo\\Source};
        \node [net] [label=signal] {};
        \node [block] {Scope\\Sink};
    \end{tikzpicture}
\end{frame}

\begin{frame}[shrink,fragile]
    \frametitle{Interfacing to the System Bus}
    \begin{example}
        \begin{python}
slave = Slave.create_and_connect(self_path, 'slave',
        pbus, fifo, status_led)
        \end{python}
    \end{example}
    \begin{tikzpicture}[start chain, align=center]
        \tikzstyle{every join} = [->];
        \tikzstyle{block} = [on chain, join, draw];
        \node [block] {CPU};
        \node [block] {Bus\\Matrix};
        \node [block] {Slave\\State Machine};
        \node [block] {Fifo\\Producer};
        \node [on chain, join] {To\\Fifo\\Source};
    \end{tikzpicture}
    \begin{example}
        \begin{python}
n = np.arange(512)
freq = 2e3
sample_rate = 48e3
x = np.sin(2 * np.pi * freq  * (n / sample_rate))
for sample in x:
    s = intbv(2**31 * sample, min=-2**31, max=2**31)
    yield cpu.store(0x00040050, s)
        \end{python}
    \end{example}
\end{frame}

\subsection{project 2}

%\begin{frame}{PWM}
%    \begin{definition}
%        The pulse width modulator is a very simple way to create a digital to analog converter.
%    \end{definition}
%\end{frame}

\begin{frame}{Goal}
    To simulate the following signal flowing through the system:
    \begin{center}
        \includegraphics[width=.7\textwidth]{img/test_project2.png}
    \end{center}
\end{frame}

\begin{frame}{Signals}
    \includegraphics[width=\textwidth]{img/gtkwave-project2.png}
\end{frame}
